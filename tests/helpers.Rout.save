
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(901772384)
> 
> suppressPackageStartupMessages({
+   library(pomp)
+   library(tidyr)
+ })
> 
> try(eff_sample_size())
Error : in 'eff_sample_size': 'object' is a required argument.
> try(eff_sample_size("bob"))
Error : 'eff_sample_size' is undefined for 'object' of class 'character'.
> 
> try(filter_mean())
Error : in 'filter_mean': 'object' is a required argument.
> try(filter_mean("bob"))
Error : 'filter_mean' is undefined for 'object' of class 'character'.
> 
> try(forecast())
Error : in 'forecast': 'object' is a required argument.
> try(forecast("bob"))
Error : 'forecast' is undefined for 'object' of class 'character'.
> 
> try(pred_mean())
Error : in 'pred_mean': 'object' is a required argument.
> try(pred_mean("bob"))
Error : 'pred_mean' is undefined for 'object' of class 'character'.
> 
> try(pred_var())
Error : in 'pred_var': 'object' is a required argument.
> try(pred_var("bob"))
Error : 'pred_var' is undefined for 'object' of class 'character'.
> 
> try(filter_traj())
Error : in 'filter_traj': 'object' is a required argument.
> try(filter_traj("bob"))
Error : 'filter_traj' is undefined for 'object' of class 'character'.
> 
> try(traces())
Error : in 'traces': 'object' is a required argument.
> try(traces("bob"))
Error : 'traces' is undefined for 'object' of class 'character'.
> 
> try(continue())
Error : in 'continue': 'object' is a required argument.
> try(continue("bob"))
Error : 'continue' is undefined for 'object' of class 'character'.
> 
> try(cond_logLik())
Error : in 'cond_logLik': 'object' is a required argument.
> try(cond_logLik("bob"))
Error : 'cond_logLik' is undefined for 'object' of class 'character'.
> 
> try(coef())
Error in coef.default() : argument "object" is missing, with no default
> try(coef("bob"))
Error in object$coefficients : $ operator is invalid for atomic vectors
> 
> try(coef() <- 3)
Error in coef() <- 3 : invalid (NULL) left side of assignment
> try(coef("bob") <- 3)
Error in coef("bob") <- 3 : 
  target of assignment expands to non-language object
> 
> try(logLik())
Error : in 'logLik': 'object' is a required argument.
> logLik("bob")
[1] NA
> 
> try(states())
Error : in 'states': 'object' is a required argument.
> try(states("bob"))
Error : 'states' is undefined for '"object"' of class 'character'.
> ou2() |>
+   states(format="d") |>
+   head()
  time         x1        x2
1    1 -3.7184616  4.249533
2    2  0.9403927  6.843546
3    3 -0.3725648  7.592267
4    4  5.8085324  6.490249
5    5  5.6054356  1.835443
6    6  7.3546052 -1.566206
> c(A=ou2(),B=gompertz()) |>
+   states(format="d") |>
+   head()
  .id time         x1        x2  X
1   A    1 -3.7184616  4.249533 NA
2   A    2  0.9403927  6.843546 NA
3   A    3 -0.3725648  7.592267 NA
4   A    4  5.8085324  6.490249 NA
5   A    5  5.6054356  1.835443 NA
6   A    6  7.3546052 -1.566206 NA
> 
> try(obs())
Error : in 'obs': 'object' is a required argument.
> try(obs("bob"))
Error : 'obs' is undefined for '"object"' of class 'character'.
> ou2() |>
+   obs(format="d") |>
+   head()
  time        y1        y2
1    1 -4.051293 4.7806442
2    2  1.834630 6.2733019
3    3 -1.317003 7.5558688
4    4  6.640487 5.7299615
5    5  6.575312 1.5614843
6    6  7.540323 0.1756402
> c(A=ou2(),B=gompertz()) |>
+   obs(format="d") |>
+   head()
  .id time        y1        y2  Y
1   A    1 -4.051293 4.7806442 NA
2   A    2  1.834630 6.2733019 NA
3   A    3 -1.317003 7.5558688 NA
4   A    4  6.640487 5.7299615 NA
5   A    5  6.575312 1.5614843 NA
6   A    6  7.540323 0.1756402 NA
> 
> try(melt())
Error : in 'melt': 'data' is a required argument.
> melt("bob")
  name value
1    1   bob
> x <- data.frame(
+   a=letters[1:5],
+   b=rnorm(5),
+   c=as.integer(1:5),
+   d=rexp(5)>0.1
+ )
> try(melt(x))
Error : in 'melt': refusing to melt data of incompatible types.
> try(melt(x[1:3]))
Error : in 'melt': refusing to melt data of incompatible types.
> try(melt(x[2:4]))
Error : in 'melt': refusing to melt data of incompatible types.
> melt(x[2:3])
   .L1 name      value
1    b    1 -1.5199346
2    b    2 -0.6149350
3    b    3 -1.2227341
4    b    4  0.6934577
5    b    5 -0.5857796
6    c    1  1.0000000
7    c    2  2.0000000
8    c    3  3.0000000
9    c    4  4.0000000
10   c    5  5.0000000
> 
> names(x) <- NULL
> melt(x[2:3])
   .L1 name      value
1    1    1 -1.5199346
2    1    2 -0.6149350
3    1    3 -1.2227341
4    1    4  0.6934577
5    1    5 -0.5857796
6    2    1  1.0000000
7    2    2  2.0000000
8    2    3  3.0000000
9    2    4  4.0000000
10   2    5  5.0000000
> 
> try(
+   list(
+     a=data.frame(x=1:3,y=rnorm(3)),
+     b=1:2,
+     c=c("A","B")
+   ) |> melt()
+ )
Error : in 'melt': refusing to melt data of incompatible types.
> try(
+   list(
+     a=data.frame(x=1:3,y=rnorm(3)),
+     b=1:2,
+     c=c(TRUE,FALSE)
+   ) |> melt()
+ )
Error : in 'melt': refusing to melt data of incompatible types.
> 
> x <- array(
+   1:15,
+   dim=c(5,3),
+   dimnames=list(X=LETTERS[12:16],letters[1:3])
+ )
> y <- melt(x); y
   X Var2 value
1  L    a     1
2  M    a     2
3  N    a     3
4  O    a     4
5  P    a     5
6  L    b     6
7  M    b     7
8  N    b     8
9  O    b     9
10 P    b    10
11 L    c    11
12 M    c    12
13 N    c    13
14 O    c    14
15 P    c    15
> melt(list(x))
   .L1 X Var2 value
1    1 L    a     1
2    1 M    a     2
3    1 N    a     3
4    1 O    a     4
5    1 P    a     5
6    1 L    b     6
7    1 M    b     7
8    1 N    b     8
9    1 O    b     9
10   1 P    b    10
11   1 L    c    11
12   1 M    c    12
13   1 N    c    13
14   1 O    c    14
15   1 P    c    15
> melt(list(list(x)))
   .L1 .L2 X Var2 value
1    1   1 L    a     1
2    1   1 M    a     2
3    1   1 N    a     3
4    1   1 O    a     4
5    1   1 P    a     5
6    1   1 L    b     6
7    1   1 M    b     7
8    1   1 N    b     8
9    1   1 O    b     9
10   1   1 P    b    10
11   1   1 L    c    11
12   1   1 M    c    12
13   1   1 N    c    13
14   1   1 O    c    14
15   1   1 P    c    15
> melt(list(t(x),x))
   .L1 Var1 X value Var2
1    1    a L     1 <NA>
2    1    b L     6 <NA>
3    1    c L    11 <NA>
4    1    a M     2 <NA>
5    1    b M     7 <NA>
6    1    c M    12 <NA>
7    1    a N     3 <NA>
8    1    b N     8 <NA>
9    1    c N    13 <NA>
10   1    a O     4 <NA>
11   1    b O     9 <NA>
12   1    c O    14 <NA>
13   1    a P     5 <NA>
14   1    b P    10 <NA>
15   1    c P    15 <NA>
16   2 <NA> L     1    a
17   2 <NA> M     2    a
18   2 <NA> N     3    a
19   2 <NA> O     4    a
20   2 <NA> P     5    a
21   2 <NA> L     6    b
22   2 <NA> M     7    b
23   2 <NA> N     8    b
24   2 <NA> O     9    b
25   2 <NA> P    10    b
26   2 <NA> L    11    c
27   2 <NA> M    12    c
28   2 <NA> N    13    c
29   2 <NA> O    14    c
30   2 <NA> P    15    c
> names(dimnames(x)) <- c("X","Y")
> z1 <- melt(list(a=x,b=x[3:5,]))
> z1 <- z1[order(z1$.L1,z1$X,z1$Y),]; z1
   .L1 X Y value
1    a L a     1
6    a L b     6
11   a L c    11
2    a M a     2
7    a M b     7
12   a M c    12
3    a N a     3
8    a N b     8
13   a N c    13
4    a O a     4
9    a O b     9
14   a O c    14
5    a P a     5
10   a P b    10
15   a P c    15
16   b N a     3
19   b N b     8
22   b N c    13
17   b O a     4
20   b O b     9
23   b O c    14
18   b P a     5
21   b P b    10
24   b P c    15
> z2 <- melt(list(a=x,b=x[3:5,c(2,3,1)]))
> z2 <- z2[order(z2$.L1,z2$X,z2$Y),];
> z3 <- melt(list(a=t(x),b=x[3:5,c(2,3,1)]))
> z3 <- z3[order(z3$.L1,z3$X,z3$Y),names(z2)];
> stopifnot(
+   all.equal(z1,z2,check.attributes=FALSE),
+   all.equal(z1,z3,check.attributes=FALSE)
+ )
> 
> list(
+   b=c(a=5,b=2),
+   c=array(rnorm(3),dim=3,dimnames=list(name=as.character(1:3))),
+   d=array(rnorm(3),dim=3),
+   e=array(rnorm(2),dim=2,dimnames=list(name=LETTERS[14:15]))
+ ) |> melt()
   .L1 name      value Var1
1    b    a  5.0000000   NA
2    b    b  2.0000000   NA
3    c    1  1.1692565   NA
4    c    2 -1.3578778   NA
5    c    3 -1.0923684   NA
6    d <NA>  0.1172689    1
7    d <NA>  0.3549312    2
8    d <NA>  1.6241228    3
9    e    N  1.3449047   NA
10   e    O  0.3683851   NA
> 
