
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="kalman2-%02d.png",res=100)
> 
> library(pomp)
> suppressPackageStartupMessages({
+   library(tidyr)
+ })
> 
> set.seed(1968726372)
> 
> gompertz() -> po
> 
> po |>
+   window(start=1,end=30) |>
+   as.data.frame() |>
+   subset(select=-X) -> dat
> 
> try(dat |> enkf())
Error : in 'enkf': 'times' should either be a numeric vector of observation times or a single name identifying the column of data that represents the observation times.
> 
> dat |>
+   enkf(
+     times="time",t0=0,Np=100,
+     params=c(r=0.1,K=150),
+     rinit=function(K, ...) {
+       c(x=K)
+     },
+     rprocess=discrete_time(
+       function (x, r, K, ...) {
+         e <- rnorm(n=1,mean=0,sd=0.1)
+         c(x=x*exp(r*(1-x/K))+e)
+       }
+     ),
+     emeasure=function(x,...) c(Y=0.01*x),
+     vmeasure=function(...) matrix(2,1,1,dimnames=list("Y","Y"))
+   ) |> plot()
> 
> try(dat |> eakf())
Error : in 'eakf': 'times' should either be a numeric vector of observation times or a single name identifying the column of data that represents the observation times.
> 
> dat |>
+   eakf(
+     times="time",t0=0,Np=100,
+     params=c(r=0.1,K=100),
+     rinit=function(K, ...) {
+       c(x=rlnorm(n=1,meanlog=log(K),sdlog=0.01))
+     },
+     rprocess=discrete_time(
+       function (x, r, K, ...) {
+         c(x=x*exp(r*(1-x/K)))
+       }
+     ),
+     vmeasure=function(R, ...) R,
+     emeasure=function(x,...) c(Y=0.01*x),
+     userdata=list(R=matrix(0.01,1,1,dimnames=list("Y","Y")))
+   ) -> kf
> 
> kf |> plot()
> 
> kf |> as.data.frame() |> names()
[1] "time"          "Y"             "cond.logLik"   "pred.mean.x"  
[5] "filter.mean.x" "forecast.Y"   
> kf |> as.data.frame() |> pivot_longer(-time) |> names()
[1] "time"  "name"  "value"
> kf |> forecast() |> melt() |> sapply(class)
       name        time       value 
"character"   "integer"   "numeric" 
> kf |> forecast(format="d") |> sapply(class)
       name        time       value 
"character"   "numeric"   "numeric" 
> kf |> filter_mean() |> melt() |> sapply(class)
       name        time       value 
"character" "character"   "numeric" 
> kf |> filter_mean(format="d") |> sapply(class)
       name        time       value 
"character"   "numeric"   "numeric" 
> kf |> filter_mean(vars="x") |> dim()
[1]  1 30
> kf |> filter_mean(vars="x") |> dimnames()
$name
[1] "x"

$time
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"

> kf |> filter_mean(vars="x",format="d") |> dim()
[1] 30  3
> kf |> filter_mean(vars="x",format="d") |> getElement("name") |> unique()
[1] "x"
> kf |> pred_mean() |> melt() |> sapply(class)
       name        time       value 
"character" "character"   "numeric" 
> kf |> pred_mean(format="d") |> sapply(class)
       name        time       value 
"character"   "numeric"   "numeric" 
> kf |> pred_mean(vars="x") |> dim()
[1]  1 30
> kf |> pred_mean(vars="x") |> dimnames()
$name
[1] "x"

$time
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"

> kf |> pred_mean(vars="x",format="d") |> dim()
[1] 30  3
> kf |> pred_mean(vars="x",format="d") |> getElement("name") |> unique()
[1] "x"
> try(kf |> pred_var() |> melt() |> sapply(class))
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'data' in selecting a method for function 'melt': 'pred_var' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> pred_var(format="d") |> sapply(class))
Error : 'pred_var' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> filter_traj() |> melt() |> sapply(class))
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'data' in selecting a method for function 'melt': 'filter_traj' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> filter_traj(format="d") |> sapply(class))
Error : 'filter_traj' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> saved_states() |> melt() |> sapply(class))
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'data' in selecting a method for function 'melt': 'saved_states' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> saved_states(format="d") |> sapply(class))
Error : 'saved_states' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> forecast(format="l"))
Error in match.arg(format) : 'arg' should be one of "array", "data.frame"
> 
> kf |> forecast(format="a") |> melt() -> kdat1a
> kf |> filter_mean(format="a") |> melt() -> kdat2a
> kf |> pred_mean(format="a") |> melt() -> kdat3a
> try(kf |> filter_traj(format="a") |> melt() -> kdat4a)
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'data' in selecting a method for function 'melt': 'filter_traj' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> eff_sample_size(format="n") |> melt() -> kdat5a)
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'data' in selecting a method for function 'melt': 'eff_sample_size' is undefined for 'object' of class 'kalmand_pomp'.
> kf |> cond_logLik(format="n") |> melt() -> kdat6a
> try(kf |> saved_states(format="l") |> melt() -> kdat7a)
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'data' in selecting a method for function 'melt': 'saved_states' is undefined for 'object' of class 'kalmand_pomp'.
> kf |> as.data.frame() -> kdat0
> kf |> forecast(format="d") -> kdat1
> kf |> filter_mean(format="d") -> kdat2
> kf |> pred_mean(format="d") -> kdat3
> try(kf |> filter_traj(format="d") -> kdat4)
Error : 'filter_traj' is undefined for 'object' of class 'kalmand_pomp'.
> try(kf |> eff_sample_size(format="d") -> kdat5)
Error : 'eff_sample_size' is undefined for 'object' of class 'kalmand_pomp'.
> kf |> cond_logLik(format="d") -> kdat6
> try(kf |> saved_states(format="d") -> kdat7)
Error : 'saved_states' is undefined for 'object' of class 'kalmand_pomp'.
> stopifnot(
+   all(kdat0$forecast.Y==kdat1$value),
+   all(kdat0$filter.mean.x==kdat2$value),
+   all(kdat0$pred.mean.x==kdat3$value),
+   all(kdat0$cond.logLik==kdat6$value),
+   all.equal(kdat1$time,as.numeric(kdat1a$time)),
+   all.equal(kdat2$time,as.numeric(kdat2a$time)),
+   all.equal(kdat3$time,as.numeric(kdat3a$time)),
+   all.equal(kdat1$value,kdat1a$value),
+   all.equal(kdat2$value,kdat2a$value),
+   all.equal(kdat3$value,kdat3a$value),
+   all.equal(kdat6$cond.logLik,kdat6a$value)
+ )
> 
> try(po |> enkf(rprocess=NULL))
Error : in 'enkf': 'rprocess' is a needed basic component.
> try(po |> eakf(rprocess=NULL))
Error : in 'eakf': 'rprocess' is a needed basic component.
> 
> dev.off()
null device 
          1 
> 
