
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="trajectory-%02d.png",res=100)
> 
> library(pomp)
> library(ggplot2)
> 
> pomp(
+   data=NULL,
+   times=seq(0,60,by=0.1),t0=0,
+   skeleton=vectorfield(Csnippet("
+     DV = c*(V-pow(V,3)/3 - R + i);
+     DR = (V + a - b*R)/c;"
+   )),
+   rinit=Csnippet("
+     V = 1; R = 0;"
+   ),
+   statenames=c("V","R"),
+   paramnames=c("c","i","a","b"),
+   params=c(a=0.7,b=0.8,c=2,i=0.8)
+ ) -> fhn
> 
> x <- array(c(0,1,1,2,1,1,0,-1),
+   dim=c(2,2,2),
+   dimnames=list(c("V","R"),NULL,NULL))
> params <- rbind(a=c(0.7,0.5),b=c(0.8,0.5),c=c(2,5),i=c(0.8,0))
> skeleton(fhn,x=x,times=c(0,3),params=params)
, , 1

    .id
name  [,1]  [,2]
   V -0.40 -6.67
   R -0.05  0.10

, , 2

    .id
name  [,1] [,2]
   V 0.933  5.0
   R 0.450  0.2

> y <- trajectory(fhn,params=params,ode_control=list(hmax=0.1),format="a")
> invisible(y[,,599:601])
> matplot(time(fhn),t(y["V",,]),type="l",lty=1)
> plot(y[1,,],y[2,,],type="n")
> points(y[1,1,],y[2,1,],pch=".",cex=3,col="black")
> points(y[1,2,],y[2,2,],pch=".",cex=3,col="red")
> 
> ## nonautonomous case
> pomp(
+   data=fhn,
+   times=seq(0,100,by=0.01),t0=0,
+   covar=covariate_table(
+     i=sin(2*pi*times),
+     times=seq(0,101,by=0.1)
+   ),
+   rinit=function(...) {
+     c(V=1,R=0)
+   },
+   skeleton=vectorfield(
+     function(V,R,a,b,c,i,...) {
+       c(
+         V=c*(V-(V^3)/3-R+i),
+         R=(V+a-b*R)/c
+       )
+     }
+   )
+ ) -> fhn1
> 
> params <- params[c("a","b","c"),]
> invisible(skeleton(fhn1,x=x,times=c(0,3),params=params))
> y <- trajectory(fhn1,params=params,ode_control=list(hmax=0.01),format="a")
> y[,,199:201]
, , 1

    .id
name      1      2
   V -0.133 -0.538
   R  1.184  0.632

, , 2

    .id
name      1      2
   V -0.161 -0.600
   R  1.182  0.632

, , 3

    .id
name      1      2
   V -0.189 -0.660
   R  1.180  0.631

> matplot(time(fhn1),t(y["V",,]),type="l",lty=1)
> plot(y[1,,],y[2,,],type="n")
> points(y[1,1,],y[2,1,],pch=".",cex=3,col="black")
> points(y[1,2,],y[2,2,],pch=".",cex=3,col="red")
> 
> invisible(trajectory(fhn,times=c(1,5),format="a"))
> try(trajectory(fhn,times=numeric(0)))
Error : in 'trajectory': in 'time<-':  times must be numeric and finite.
> try(trajectory(fhn,times=c(1,1,1)))
<object of class 'pomp'>
> try(trajectory(fhn,t0=10))
Error : in 'trajectory': 't0' must be a single number not greater than 'times[1]'.
> try(trajectory(fhn,params=c(3,2,1)))
Error : in 'trajectory': in 'rinit': variable 'c' not found among the parameters.
> try(trajectory(fhn,params=matrix(c(3,2,1,5),2,2)))
Error : in 'trajectory': in 'rinit': variable 'c' not found among the parameters.
> try(trajectory(fhn,params=NULL))
Error : in 'trajectory': in 'rinit': variable 'c' not found among the parameters.
> try(trajectory(fhn,params=list(a=3,b=2)))
Error : in 'trajectory': in 'rinit': variable 'c' not found among the parameters.
> try(trajectory(fhn,ode_control=list(maxsteps=-1)))
DLSODA-  MXSTEP (=I1) .lt. 0  
In above message, I1 = -1
 
Error : in 'trajectory': in 'flow': error in ODE integrator: illegal input detected before taking any integration steps - see written message
> try(trajectory(fhn,ode_control=list(maxsteps=1),verbose=TRUE) -> x)
DLSODA-  At current T (=R1), MXSTEP (=I1) steps   
      taken on this call before reaching TOUT     
In above message, I1 = 1
 
In above message, R1 = 9.89415e-05
 

--------------------
lsoda return code
--------------------

  return code (idid) =  -1 
  Excess work done on this call. (Perhaps wrong Jacobian type MF.)

--------------------
INTEGER values
--------------------

  1 The return code : -1 
  2 The number of steps taken for the problem so far: 1 
  3 The number of function evaluations for the problem so far: 3 
  5 The method order last used (successfully): 1 
  6 The order of the method to be attempted on the next step: 1 
  7 If return flag =-4,-5: the largest component in error vector 0 
  8 The length of the real work array actually required: 52 
  9 The length of the integer work array actually required: 22 
 14 The number of Jacobian evaluations and LU decompositions so far: 0 
 15 The method indicator for the last succesful step,
           1=adams (nonstiff), 2= bdf (stiff): 1 
 16 The current method indicator to be attempted on the next step,
           1=adams (nonstiff), 2= bdf (stiff): 1 
 
--------------------
RSTATE values
--------------------

  1 The step size in t last used (successfully): 9.89e-05 
  2 The step size to be attempted on the next step: 9.89e-05 
  3 The current value of the independent variable which the solver has reached: 9.89e-05 
  4 Tolerance scale factor > 1.0 computed when requesting too much accuracy: 0 
  5 The value of t at the time of the last method switch, if any: 0 
 
Warning messages:
1: In lsoda(y, times, func, parms, ...) :
  an excessive amount of work (> maxsteps ) was done, but integration was not successful - increase maxsteps
2: In lsoda(y, times, func, parms, ...) :
  Returning early. Results are accurate, as far as they go
3: in 'flow': abnormal exit from ODE integrator, istate = -1 
> try(trajectory(pomp(fhn,accumvars="q")) -> x)
Error : in 'trajectory': in 'flow': accumulator variable 'q' not found among the state variables.
> fhn@skeleton@type <- 3L
> stopifnot(
+   {
+     trajectory(fhn,format="array") -> x
+     sum(is.na(x))==1202
+   }
+ )
> try(trajectory("fhn"))
Error : 'trajectory' is undefined for 'object' of class 'character'.
> try(trajectory())
Error : in 'trajectory': 'times' should either be a numeric vector of observation times or a single name identifying the column of data that represents the observation times.
> 
> sir() -> sir
> trajectory(sir,format="data.frame") -> x
> plot(cases~time,data=x,type="l")
> 
> gompertz() -> gompertz
> gompertz |> trajectory(format="a") -> x
> gompertz |>
+   pomp(
+     skeleton=map(function(r,X,Y,K,...){
+       c(X=r*X*exp(-X/K),Y=Y+X)
+     }),
+     accumvars=c("Y"),
+     params=c(r=17,X_0=1,Y.0=0,K=100)
+   ) -> po3
> po3 |>
+   trajectory(times=seq(1,1000),format="data.frame") -> dat
> plot(X~time,data=dat,subset=(time<100),type="l")
> plot(X~Y,data=dat)
> gompertz |>
+   pomp(accumvars=c("X")) |>
+   trajectory(times=seq(1,1000,by=10),format="a") -> x
> stopifnot(all(x==0))
> 
> try(
+   po3 |>
+     pomp(skeleton=map(function(...)c(X=1,Y=2,Z=3))) |>
+     trajectory(params=c(X_0=1,Y_0=0),format="a")
+ )
Error : in 'trajectory': in 'flow': 'skeleton' returns a vector of 3 state variables but 2 are expected.
> 
> stopifnot(
+   po3 |> trajectory(times=seq(0,100,by=5),format="a") |> dim()==c(2,1,21),
+   po3 |> pomp(skeleton=NULL) |> trajectory(format="a") |> is.na()
+ )
> 
> trajectory(
+   t0=0,times=seq(0,10,by=0.1),
+   rinit=function(...)c(x=1,y=0),
+   skeleton=vectorfield(function(x,y,t,...)c(x=x,y=200*t)),
+   format="d"
+ ) -> dat
> plot(x~time,data=dat,col=2,type="l",ylab="")
> lines(y~time,data=dat,col=3)
> 
> dat1 <- dat[c("time","x","y")]
> names(dat1) <- c("time","X","Y")
> dat1 |>
+   trajectory(
+     t0=0,times="time",
+     rinit=function(...)c(x=1,y=0),
+     skeleton=vectorfield(function(x,y,t,...)c(x=x,y=200*t)),
+     format="d"
+   ) -> dat2
> stopifnot(all.equal(dat,dat2))
> 
> ricker() -> po
> try(trajectory(po,params=c("A","B")))
Error : in 'trajectory': 'params' must be named and numeric.
> p <- parmat(coef(po),3)
> colnames(p) <- LETTERS[1:3]
> p["r",] <- c(5,10,45)
> po |>
+   trajectory(params=p,times=1:5,format="array") |>
+   dimnames() -> dn
> stopifnot(
+   names(dn)==c("name",".id","time"),
+   dn$.id==LETTERS[1:3],
+   is.null(dn$time)
+ )
> po |>
+   trajectory(params=p,times=1:5,format="data.frame") -> x
> unique(x$.id)
[1] A B C
Levels: A < B < C
> po |>
+   trajectory(format="pomps") |>
+   trajectory(params=p,times=1:50,format="pomps") -> pos
> states(pos) -> x
> obs(pos) -> y
> stopifnot(
+   names(pos)==LETTERS[1:3],
+   length(x)==3,
+   length(y)==3
+ )
> pos |>
+   as.data.frame() |>
+   ggplot(aes(x=time,y=N,group=.L1,color=.L1))+
+   geom_line()+
+   facet_wrap(~.L1,ncol=1)+
+   theme_bw()
> 
> dev.off()
null device 
          1 
> 
