
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="pmcmc-%02d.png",res=100)
> 
> library(pomp)
> 
> set.seed(857075216L)
> 
> gompertz() |> window(end=10) -> po
> 
> prop1 <- mvn_diag_rw(c(r=0.01,sigma=0.01))
> 
> mcmc1 <- pmcmc(
+   po,Nmcmc=100,Np=100,dprior=Csnippet("
+     lik = dunif(r,0,1,1)+dnorm(sigma,0,1,1);
+     lik = (give_log) ? lik : exp(lik);"),
+   paramnames=c("r","sigma"),
+   proposal=prop1
+ )
> 
> try(pmcmc())
Error : in 'pmcmc': 'data' is a required argument.
> try(pmcmc("bob"))
Error : 'pmcmc' is undefined for 'data' of class 'character'.
> try(pmcmc(po))
Error : in 'pmcmc': 'proposal' must be specified
> try(pmcmc(po,proposal="yes"))
Error : in 'pmcmc': 'proposal' must be a function: object 'yes' of mode 'function' was not found
> try(pmcmc(po,proposal=NULL))
Error : in 'pmcmc': 'proposal' must be specified
> try(pmcmc(po,proposal=3))
Error : in 'pmcmc': 'proposal' must be a function: object 'proposal' of mode 'function' was not found
> try(pmcmc(po,proposal="prop1"))
Error : in 'pmcmc': in 'pfilter': 'Np' must be specified.
> try(pmcmc(po,proposal=prop1))
Error : in 'pmcmc': in 'pfilter': 'Np' must be specified.
> try(pmcmc(po,proposal=prop1,Np="bob"))
Error : in 'pmcmc': in 'pfilter': 'Np' must be a number, a vector of numbers, or a function.
> try(pmcmc(po,proposal=prop1,Np=NULL))
Error : in 'pmcmc': in 'pfilter': 'Np' must be specified.
> try(pmcmc(po,proposal=prop1,Np=NA))
Error : in 'pmcmc': in 'pfilter': 'Np' must be a number, a vector of numbers, or a function.
> try(pmcmc(po,proposal=prop1,Np=c(1,2,3)))
Error : in 'pmcmc': in 'pfilter': 'Np' must have length 1 or length 11.
> try(pmcmc(po,proposal=prop1,Np=-5))
Error : in 'pmcmc': in 'pfilter': number of particles, 'Np', must be a positive integer.
> pmcmc(po,proposal=prop1,Np=1)
<object of class 'pmcmcd_pomp'>
> pmcmc(po,proposal=prop1,Np=rep(1,11))
<object of class 'pmcmcd_pomp'>
> try(pmcmc(po,proposal=prop1,Np=function(k)10*k))
Error : in 'pmcmc': in 'pfilter': number of particles, 'Np', must be a positive integer.
> pmcmc(po,proposal=prop1,Np=function(k)10*k+10)
<object of class 'pmcmcd_pomp'>
> 
> try(pmcmc(mcmc1,params=c(r=3,K=1,sigma=0.1,tau=0.1,X_0=1),Np=100))
Error : in 'pmcmc': non-finite log prior at starting parameters.
> 
> pf <- pfilter(po,Np=100)
> mcmc2 <- pmcmc(pf,Nmcmc=100,proposal=prop1)
> mcmc3 <- pmcmc(mcmc1,Nmcmc=50)
> mcmc3 <- continue(mcmc3,Nmcmc=50)
> 
> plot(c(mcmc1,mcmc2,mcmc3),pars=c("r","sigma"),density=FALSE)
> plot(c(mcmc1,c(mcmc2,mcmc3)),pars=c("r","sigma"),trace=FALSE)
> invisible(window(traces(c(c(mcmc1,c(mcmc2,mcmc3)))),thin=10))
> plot(traces(c(c(mcmc1,mcmc2),mcmc3),c("r","sigma")))
> try(traces(c(c(mcmc1,mcmc2),mcmc3),c("r","bob")))
Error : in 'traces': parameter 'bob' not found.
> dim(as.data.frame(c(mcmc1,mcmc2)))
[1] 20  5
> 
> filter_traj(c(mcmc1,mcmc2,mcmc3)) -> ft
> stopifnot(
+   dim(ft)==c(1,100,11,3),
+   names(dimnames(ft))==c("name","rep","time","chain")
+ )
> 
> print(mcmc1)
<object of class 'pmcmcd_pomp'>
> c(mcmc1,mcmc2) -> mcl
> mcl[1]
[[1]]
<object of class 'pmcmcd_pomp'>

> mcl[3]
[[1]]
NULL

> 
> stopifnot(dim(filter_traj(mcmc1))==c(1,100,11),
+   dim(filter_traj(c(mcmc1,mcmc2,mcmc3)))==c(1,100,11,3))
> logLik(mcmc1)
[1] 3.43
> logLik(c(mcmc1,mcmc2,mcmc3))
[1] 3.43 3.43 3.43
> 
> pmcmc(mcmc1,params=as.list(coef(mcmc3)))
<object of class 'pmcmcd_pomp'>
> try(pmcmc(mcmc1,params=NULL))
Error : in 'pmcmc': in 'dprior': variable 'r' not found among the parameters.
In addition: Warning message:
In rnorm(n = n, mean = theta[parnm], sd = rw.sd) : NAs produced
> try(pmcmc(mcmc1,params=-7))
Error : in 'pmcmc': 'params' must be a named numeric vector.
> try(pmcmc(mcmc1,params="yes"))
Error : in 'pmcmc': 'params' must be a named numeric vector.
In addition: Warning message:
NAs introduced by coercion 
> try(pmcmc(mcmc1,params=list()))
Error : in 'pmcmc': in 'dprior': variable 'r' not found among the parameters.
In addition: Warning message:
In rnorm(n = n, mean = theta[parnm], sd = rw.sd) : NAs produced
> try({tmp <- mcmc1; coef(tmp) <- NULL; pmcmc(tmp)})
Error : in 'pmcmc': in 'dprior': variable 'r' not found among the parameters.
In addition: Warning message:
In rnorm(n = n, mean = theta[parnm], sd = rw.sd) : NAs produced
> try(pmcmc(mcmc1,proposal=function(...)c(3,2)))
Error : in 'pmcmc': 'proposal' must return a named numeric vector.
> try(pmcmc(mcmc1,Nmcmc=3,proposal=function(...)c(a=3,b=2,X.0=1)))
Error : in 'pmcmc': in 'dprior': variable 'r' not found among the parameters.
> try(pmcmc(mcmc1,proposal=function(...)stop("oh no!")))
Error : in 'pmcmc': error in proposal function: oh no!
> try({
+   count <- 0
+   delayed.failure <- function (theta, ...) {
+     count <<- count+1
+     if (count>5) stop("no sir!") else theta
+   }
+   pmcmc(mcmc1,proposal=delayed.failure)})
Error : in 'pmcmc': error in proposal function: no sir!
> 
> try(pmcmc(mcmc1,Nmcmc=-20))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> try(pmcmc(mcmc1,Nmcmc=NA))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> try(pmcmc(mcmc1,Nmcmc=c(5,10,15)))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> 
> try(pmcmc(mcmc1,dprior=function(log,...)stop("not again!")))
Error : in 'pmcmc': in 'dprior': not again!
> try({
+   count <- 0
+   delayed.failure <- function (log, ...) {
+     count <<- count+1
+     if (count>5) stop("uh huh") else 1
+   }
+   pmcmc(mcmc1,dprior=delayed.failure)})
Error : in 'pmcmc': in 'dprior': uh huh
> 
> try(pmcmc(mcmc1,dmeasure=function(log,...)if (log) -Inf else 0))
Error : in 'pmcmc': non-finite log likelihood at starting parameters.
> 
> capture.output(invisible(pmcmc(mcmc1,Nmcmc=10,verbose=TRUE))) -> out
> stopifnot(sum(grepl("acceptance ratio",out))==10)
> stopifnot(sum(grepl("PMCMC iteration",out))==11)
> 
> gompertz() -> gompertz
> 
> set.seed(857075216L)
> 
> try(gompertz |> as.data.frame() |> pmcmc())
Error : in 'pmcmc': 'times' should either be a numeric vector of observation times or a single name identifying the column of data that represents the observation times.
> try(gompertz |> as.data.frame() |> pmcmc(times="time",t0=0))
Error : in 'pmcmc': 'proposal' must be specified
> try(gompertz |> as.data.frame() |> pmcmc(times="time",t0=0,
+   proposal=mvn_diag_rw(c(a=1,b=2))))
Error : in 'pmcmc': in 'pfilter': 'rprocess', 'dmeasure' are needed basic components.
In addition: Warning message:
In rnorm(n = n, mean = theta[parnm], sd = rw.sd) : NAs produced
> 
> gompertz |>
+   as.data.frame() |>
+   pmcmc(
+     Nmcmc=10,Np=100,
+     times="time",t0=0,
+     rprocess=discrete_time(
+       function (x, r, K, ...) {
+         c(x=x*exp(r*(1-x/K)))
+       }
+     ),
+     dmeasure=function (Y, x, ..., log) {
+       dlnorm(Y,meanlog=log(0.01*x),sdlog=2,log=log)
+     },
+     dprior=function(r,K,...,log) {
+       ll <- sum(dlnorm(x=c(r,K),meanlog=log(0.1,150),sdlog=3,log=TRUE))
+       if (log) ll else exp(ll)
+     },
+     proposal=mvn_diag_rw(c(r=0.01,K=10)),
+     params=c(r=0.1,K=150,x_0=150)
+   ) -> mcmc5
> plot(mcmc5,pars=c("r","K"))
> 
> dev.off()
null device 
          1 
> 
