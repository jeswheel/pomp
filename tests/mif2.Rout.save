
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="mif2-%02d.png",res=100)
> 
> set.seed(857075216L)
> 
> library(pomp)
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> 
> gompertz() |> window(end=10) -> po
> 
> mif2(po,Nmif=50,Np=100,cooling.fraction.50=0.5,
+   rw.sd=rw_sd(sigma=0.02,K=0.02,r=0.02)) -> mf1
> mif2(po,Nmif=50,Np=100,cooling.fraction.50=0.5,
+   rw.sd=rw_sd(sigma=0.02,K=0.02,r=0.02)) -> mf2
> plot(mf1)
> plot(c(a=mf1,b=mf2) -> mfl,y=NA)
> c(a=mf1,b=c(mf1,mf2))
$a
<object of class 'mif2d_pomp'>

$b1
<object of class 'mif2d_pomp'>

$b2
<object of class 'mif2d_pomp'>

> dim(as.data.frame(c(a=mf1,b=c(mf1,mf2))))
[1] 30  6
> mfl[1]
$a
<object of class 'mif2d_pomp'>

> mfl["b"]
$b
<object of class 'mif2d_pomp'>

> mfl[5]
[[1]]
NULL

> traces(mfl) -> tr
> stopifnot(
+   length(tr)==2,
+   names(tr)==c("a","b"),
+   dim(tr$a)==dim(tr$b),
+   identical(dimnames(tr$a),dimnames(tr$b)),
+   colnames(tr$a)==c("loglik","K","r","sigma","tau","X_0")
+ )
> coef(mfl) -> m
> stopifnot(
+   dim(m)==c(5,2),
+   colnames(m)==c("a","b"),
+   rownames(m)==names(coef(po))
+ )
> 
> mfl |>
+   traces(transform=TRUE,pars=c("r","sigma")) -> tr
> stopifnot(
+   length(tr)==2,
+   names(tr)==c("a","b"),
+   dim(tr$a)==dim(tr$b),
+   identical(dimnames(tr$a),dimnames(tr$b)),
+   colnames(tr$a)==c("r","sigma")
+ )
> 
> try(mfl |> traces(pars="bob"))
Error : in 'traces': parameter 'bob' not found.
> 
> try(mif2())
Error : in 'mif2': 'data' is a required argument.
> try(mif2("po"))
Error : 'mif2' is undefined for 'data' of class 'character'.
> try(mif2(po,Nmif=NA,Np=100))
Error : in 'mif2': 'Nmif' must be a positive integer.
> try(mif2(po,Nmif=NULL,Np=100))
Error : in 'mif2': 'Nmif' must be a positive integer.
> try(mif2(po,Nmif=-10,Np=100))
Error : in 'mif2': 'Nmif' must be a positive integer.
> try(mif2(po,Nmif=c(10,20),Np=100))
Error : in 'mif2': 'Nmif' must be a positive integer.
> try(mif2(po,Nmif=1,Np=function(k)c(10,20)))
Error : in 'mif2': if 'Np' is a function, it must return a single positive integer.
> try(mif2(po,Nmif=1,Np="bob"))
Error : in 'mif2': 'Np' must be a number, a vector of numbers, or a function.
> try(mif2(po,Nmif=list(),Np=100))
Error : in 'mif2': 'Nmif' must be a positive integer.
> try(mif2(po,Nmif=1,Np=Inf))
Error : in 'mif2': number of particles, 'Np', must be a positive integer.
> try(mif2(po,Nmif=1,Np=100))
Error : in 'mif2': 'rw.sd' must be specified!
> try(mif2(po,Nmif=1,Np=NULL))
Error : in 'mif2': 'Np' must be specified.
> try(mif2(po,Nmif=1,Np=c(3,4)))
Error : in 'mif2': 'Np' must have length 1 or length 11.
> try(mif2(po,Nmif=1,Np=c(rep(100,10),40),rw.sd=rw_sd(sigma=0.1),cooling.fraction.50=0.5))
Error : in 'mif2': Np[1] must equal Np[11].
> mif2(po,Nmif=1,Np=c(rep(100,9),40,100),rw.sd=rw_sd(sigma=0.1),cooling.fraction.50=0.5)
<object of class 'mif2d_pomp'>
> try(mif2(po,Nmif=1,Np=100,rw.sd=3))
Error : in 'mif2': 'rw.sd' should be specified using the 'rw_sd' function. See '?mif2'.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd()))
Error : in 'mif2': in 'rw.sd': parameters must be referenced by name.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(a=9)))
Error : in 'mif2': the following parameter(s), given random walks in 'rw.sd', are not present in 'params': 'a'.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(sigma=1:1000)))
Error : in 'mif2': 'rw.sd' spec for parameter 'sigma' does not evaluate to a vector of the correct length ('length(time(object))'=10).
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1)))
Error : in 'mif2': 'cooling.fraction.50' is a required argument.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(NULL)))
Error : in 'mif2': in 'rw.sd': parameters must be referenced by name.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1),cooling.fraction.50=12))
Error : in 'mif2': 'cooling.fraction.50' must be in (0,1].
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1),cooling.fraction.50=NA))
Error : in 'mif2': 'cooling.fraction.50' must be in (0,1].
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1),cooling.fraction.50=c(0.1,1)))
Error : in 'mif2': 'cooling.fraction.50' must be in (0,1].
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1),cooling.fraction.50=NULL))
Error : in 'mif2': 'cooling.fraction.50' must be in (0,1].
> try(mif2(po,params=NULL,Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1)))
Error : in 'mif2': the following parameter(s), given random walks in 'rw.sd', are not present in 'params': 'sigma'.
> try(mif2(po,params=list(),Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1)))
Error : in 'mif2': the following parameter(s), given random walks in 'rw.sd', are not present in 'params': 'sigma'.
> try(mif2(po,params=list(NULL),Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1)))
Error : in 'mif2': 'list' object cannot be coerced to type 'double'
> try(mif2(po,params=c(3,2,1),Nmif=1,Np=100,rw.sd=rw_sd(sigma=0.1)))
Error : in 'mif2': 'params' must be a named numeric vector.
> try(mif2(po,Nmif=1,Np=100:1000,rw.sd=rw_sd(sigma=0.1)))
Error : in 'mif2': 'Np' must have length 1 or length 11.
> mif2(po,Nmif=2,Np=50,rw.sd=rw_sd(sigma=0.01,X_0=ivp(0.01)),
+   cooling.fraction.50=0.1,cooling.type="geometric",
+   params=as.list(coef(po)))
<object of class 'mif2d_pomp'>
> try(mif2(po,Nmif=2,Np=100,rw.sd=rw_sd(sigma=0.01,X_0=ivp(0.01)),
+   cooling.fraction.50=0.1,rprocess=onestep(function(x,t,params,covars,delta.t,...)stop("boink"))))
Error : in 'mif2': in 'rprocess': boink
> try(mif2(po,Nmif=2,Np=100,rw.sd=rw_sd(sigma=0.01,X_0=ivp(0.01)),
+   cooling.fraction.50=0.1,dmeasure=function(log,...)stop("blop")))
Error : in 'mif2': in 'dmeasure': blop
> try(mif2(po,Nmif=2,Np=100,rw.sd=rw_sd(sigma=0.01,X_0=ivp(0.01)),
+   cooling.fraction.50=0.1,dmeasure=function(log,...)NA))
Error : in 'mif2': 'dmeasure' with log=TRUE returns illegal value.
Log likelihood, data, states, and parameters are:
  time:            1
loglik:           NA
     Y:      1.02624
     X:      1.10739
     K:            1
     r:          0.1
 sigma:    0.0996772
   tau:          0.1
   X_0:     0.990808
> try(
+   mif2(po,Nmif=2,Np=50,rw.sd=rw_sd(sigma=0.01),
+     cooling.type="hyper",cooling.fraction.50=0.1,
+     drpocess="oops",
+     dmeasure=function(log,...)0) -> mf3
+ )
Error : in 'mif2': The argument 'drpocess'is not recognized.
Use the 'userdata' argument to supply extra objects to basic model components. See '?userdata'.
> mif2(po,Nmif=2,Np=50,rw.sd=rw_sd(sigma=0.01),
+   cooling.type="hyper",cooling.fraction.50=0.1,
+   dmeasure=function(log,...)0) -> mf3
> try(mif2(po,Nmif=2,Np=50,rw.sd=rw_sd(sigma=0.01),cooling.fraction.50=0.1,dmeasure=NULL))
Error : in 'mif2': 'rprocess', 'dmeasure' are needed basic components.
> try(mif2(po,Nmif=2,Np=50,rw.sd=rw_sd(sigma=0.01),cooling.fraction.50=0.1,rprocess=NULL))
Error : in 'mif2': 'rprocess', 'dmeasure' are needed basic components.
> try(mif2(po,Nmif=2,Np=50,rw.sd=rw_sd(sigma=0.01),cooling.fraction.50=0.1,params=NULL))
Error : in 'mif2': the following parameter(s), given random walks in 'rw.sd', are not present in 'params': 'sigma'.
> 
> theta <- coef(po)
> theta["sigma"] <- 0.2
> po |>
+   pfilter(Np=100,params=theta) |>
+   mif2(Nmif=3,rw.sd=rw_sd(sigma=0.01,X_0=ivp(0.01)),cooling.fraction.50=0.5) |>
+   mif2() |> continue(Nmif=3,cooling.fraction.50=0.1) -> mf
> mf |>
+   plot(pars=c("X_0","sigma"),transform=TRUE)
> 
> capture.output(
+   mif2(po,Nmif=2,Np=100,rw.sd=rw_sd(sigma=0.01,X_0=ivp(0.01)),
+     cooling.fraction.50=1,cooling.type="hyperbolic",
+     params=as.list(coef(po)),verbose=TRUE),
+   type="output"
+ ) -> out
> stopifnot(sum(grepl("mif2 pfilter timestep",out))==4,
+   sum(grepl("mif2 iteration",out))==2)
> 
> po |>
+   as.data.frame() |>
+   subset(select=-X) |>
+   mif2(Nmif=3,Np=100,
+     times="time",t0=0,
+     params=c(sigma=5),
+     rw.sd=rw_sd(sigma=0.01),
+     cooling.fraction.50=1,cooling.type="hyperbolic",
+     rprocess=onestep(function(X,...)c(X=X)),
+     dmeasure=function(Y,X,sigma,log,...)dnorm(x=Y,mean=X,sd=sigma,log=log),
+     rinit=function(...)c(X=0)
+   )
<object of class 'mif2d_pomp'>
> 
> mf3 |>
+   continue(dmeasure=Csnippet("lik = (give_log) ? R_NegInf : 0;"))
<object of class 'mif2d_pomp'>
Warning message:
filtering failure at last filter iteration: using unweighted mean for point estimate. 
> 
> dev.off()
null device 
          1 
> 
